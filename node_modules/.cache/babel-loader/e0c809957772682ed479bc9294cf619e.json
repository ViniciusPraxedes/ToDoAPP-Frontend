{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vini\\\\Documents\\\\ToDoREACT\\\\src\\\\components\\\\TodoList.js\";\nimport React, { useState, useEffect } from 'react';\nimport TodoForm from './TodoForm';\nimport Todo from './Todo';\nimport { apiClient } from './ApiClient';\nfunction TodoList() {\n  const [todos, setTodos] = useState([]);\n  const fetchTodos = async () => {\n    try {\n      const response = await apiClient.get(`/todos`);\n      setTodos(response.data);\n    } catch (error) {\n      console.error('Error retrieving todos:', error);\n    }\n  };\n  const addTodo = todo => {\n    apiClient.post(`/todos`, todo);\n    if (!todo.text || /^\\s*$/.test(todo.text)) {\n      return;\n    }\n    fetchTodos();\n  };\n  const updateTodo = (id, todo) => {\n    apiClient.put(`/todos/${id}`, todo);\n    if (!todo.text || /^\\s*$/.test(todo.text)) {\n      return;\n    }\n    fetchTodos();\n  };\n  const removeTodo = id => {\n    apiClient.delete(`/todos/${id}`);\n    fetchTodos();\n  };\n  const completeTodo = id => {\n    let updatedTodos = todos.map(todo => {\n      if (todo.id === id) {\n        todo.isComplete = !todo.isComplete;\n      }\n      return todo;\n    });\n    setTodos(updatedTodos);\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }, \"What's the Plan for Today?\"), /*#__PURE__*/React.createElement(TodoForm, {\n    onSubmit: addTodo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Todo, {\n    todos: todos,\n    completeTodo: completeTodo,\n    removeTodo: removeTodo,\n    updateTodo: updateTodo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }));\n}\nexport default TodoList;","map":{"version":3,"names":["React","useState","useEffect","TodoForm","Todo","apiClient","TodoList","todos","setTodos","fetchTodos","response","get","data","error","console","addTodo","todo","post","text","test","updateTodo","id","put","removeTodo","delete","completeTodo","updatedTodos","map","isComplete","createElement","Fragment","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit"],"sources":["C:/Users/Vini/Documents/ToDoREACT/src/components/TodoList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport Todo from './Todo';\r\n\r\nimport { apiClient } from './ApiClient'\r\n\r\n\r\n\r\nfunction TodoList() {\r\n\r\n  const [todos, setTodos] = useState([]);\r\n  \r\n\r\n\r\n  const fetchTodos = async () => {\r\n     try {\r\n       const response = await apiClient.get(`/todos`);\r\n        setTodos(response.data);\r\n      } catch (error) {\r\n        console.error('Error retrieving todos:', error);\r\n         }     \r\n  };\r\n    \r\n  \r\n    const addTodo = (todo) => {\r\n      apiClient.post(`/todos`, todo)\r\n      if (!todo.text || /^\\s*$/.test(todo.text)) {\r\n        return;\r\n      }\r\n  \r\n      fetchTodos();\r\n    }\r\n\r\n    const updateTodo = (id, todo) => {\r\n      apiClient.put(`/todos/${id}`, todo)\r\n      if (!todo.text || /^\\s*$/.test(todo.text)) {\r\n        return;\r\n      }\r\n  \r\n      fetchTodos();\r\n    };\r\n  \r\n    const removeTodo = (id) => {\r\n      apiClient.delete(`/todos/${id}`)\r\n      fetchTodos();\r\n    }\r\n\r\n\r\n\r\n    const completeTodo = (id) => {\r\n        let updatedTodos = todos.map(todo => {\r\n          if (todo.id === id) {\r\n            todo.isComplete = !todo.isComplete;\r\n          }\r\n          return todo;\r\n        });\r\n        setTodos(updatedTodos);\r\n      };\r\n\r\n      \r\n\r\n\r\n      return (\r\n        <>\r\n          <h1>What's the Plan for Today?</h1>\r\n          <TodoForm onSubmit={addTodo} />\r\n          <Todo\r\n            todos={todos}\r\n            completeTodo={completeTodo}\r\n            removeTodo={removeTodo}\r\n            updateTodo={updateTodo}\r\n          />\r\n        </>\r\n      );\r\n}\r\nexport default TodoList;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,IAAI,MAAM,QAAQ;AAEzB,SAASC,SAAS,QAAQ,aAAa;AAIvC,SAASC,QAAQA,CAAA,EAAG;EAElB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAItC,MAAMQ,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAML,SAAS,CAACM,GAAG,CAAE,QAAO,CAAC;MAC7CH,QAAQ,CAACE,QAAQ,CAACE,IAAI,CAAC;IACzB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC9C;EACP,CAAC;EAGC,MAAME,OAAO,GAAIC,IAAI,IAAK;IACxBX,SAAS,CAACY,IAAI,CAAE,QAAO,EAAED,IAAI,CAAC;IAC9B,IAAI,CAACA,IAAI,CAACE,IAAI,IAAI,OAAO,CAACC,IAAI,CAACH,IAAI,CAACE,IAAI,CAAC,EAAE;MACzC;IACF;IAEAT,UAAU,CAAC,CAAC;EACd,CAAC;EAED,MAAMW,UAAU,GAAGA,CAACC,EAAE,EAAEL,IAAI,KAAK;IAC/BX,SAAS,CAACiB,GAAG,CAAE,UAASD,EAAG,EAAC,EAAEL,IAAI,CAAC;IACnC,IAAI,CAACA,IAAI,CAACE,IAAI,IAAI,OAAO,CAACC,IAAI,CAACH,IAAI,CAACE,IAAI,CAAC,EAAE;MACzC;IACF;IAEAT,UAAU,CAAC,CAAC;EACd,CAAC;EAED,MAAMc,UAAU,GAAIF,EAAE,IAAK;IACzBhB,SAAS,CAACmB,MAAM,CAAE,UAASH,EAAG,EAAC,CAAC;IAChCZ,UAAU,CAAC,CAAC;EACd,CAAC;EAID,MAAMgB,YAAY,GAAIJ,EAAE,IAAK;IACzB,IAAIK,YAAY,GAAGnB,KAAK,CAACoB,GAAG,CAACX,IAAI,IAAI;MACnC,IAAIA,IAAI,CAACK,EAAE,KAAKA,EAAE,EAAE;QAClBL,IAAI,CAACY,UAAU,GAAG,CAACZ,IAAI,CAACY,UAAU;MACpC;MACA,OAAOZ,IAAI;IACb,CAAC,CAAC;IACFR,QAAQ,CAACkB,YAAY,CAAC;EACxB,CAAC;EAKD,oBACE1B,KAAA,CAAA6B,aAAA,CAAA7B,KAAA,CAAA8B,QAAA,qBACE9B,KAAA,CAAA6B,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAI,4BAA8B,CAAC,eACnCpC,KAAA,CAAA6B,aAAA,CAAC1B,QAAQ;IAACkC,QAAQ,EAAEtB,OAAQ;IAAAgB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,eAC/BpC,KAAA,CAAA6B,aAAA,CAACzB,IAAI;IACHG,KAAK,EAAEA,KAAM;IACbkB,YAAY,EAAEA,YAAa;IAC3BF,UAAU,EAAEA,UAAW;IACvBH,UAAU,EAAEA,UAAW;IAAAW,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACxB,CACD,CAAC;AAEX;AACA,eAAe9B,QAAQ"},"metadata":{},"sourceType":"module"}